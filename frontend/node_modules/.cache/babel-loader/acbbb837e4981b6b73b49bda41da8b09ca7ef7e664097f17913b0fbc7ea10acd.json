{"ast":null,"code":"var _jsxFileName = \"/Users/admin/my_fix_project/frontend/src/components/ServerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ServerDashboard() {\n  _s();\n  const [logs, setLogs] = useState([]);\n\n  // For demonstration, let's simulate logs from an API endpoint.\n  // In a real application, you might use WebSocket or polling.\n  useEffect(() => {\n    // Simulate fetching logs every 5 seconds.\n    const interval = setInterval(async () => {\n      try {\n        // Replace this with your actual endpoint for logs.\n        const response = await axios.get('http://localhost:5002/logs');\n        setLogs(response.data.logs);\n      } catch (error) {\n        console.error('Error fetching logs:', error);\n      }\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Server Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '1rem',\n        height: '300px',\n        overflowY: 'scroll'\n      },\n      children: logs.length > 0 ? logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 36\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No logs available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(ServerDashboard, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = ServerDashboard;\nexport default ServerDashboard;\nvar _c;\n$RefreshReg$(_c, \"ServerDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ServerDashboard","_s","logs","setLogs","interval","setInterval","response","get","data","error","console","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","border","padding","height","overflowY","length","map","log","index","_c","$RefreshReg$"],"sources":["/Users/admin/my_fix_project/frontend/src/components/ServerDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction ServerDashboard() {\n  const [logs, setLogs] = useState([]);\n\n  // For demonstration, let's simulate logs from an API endpoint.\n  // In a real application, you might use WebSocket or polling.\n  useEffect(() => {\n    // Simulate fetching logs every 5 seconds.\n    const interval = setInterval(async () => {\n      try {\n        // Replace this with your actual endpoint for logs.\n        const response = await axios.get('http://localhost:5002/logs');\n        setLogs(response.data.logs);\n      } catch (error) {\n        console.error('Error fetching logs:', error);\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <h2>Server Dashboard</h2>\n      <div style={{ border: '1px solid #ccc', padding: '1rem', height: '300px', overflowY: 'scroll' }}>\n        {logs.length > 0 ? (\n          logs.map((log, index) => <p key={index}>{log}</p>)\n        ) : (\n          <p>No logs available.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ServerDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,4BAA4B,CAAC;QAC9DJ,OAAO,CAACG,QAAQ,CAACE,IAAI,CAACN,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAME,aAAa,CAACP,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBjB,OAAA;MAAKkB,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAT,QAAA,EAC7FV,IAAI,CAACoB,MAAM,GAAG,CAAC,GACdpB,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAAK1B,OAAA;QAAAa,QAAA,EAAgBY;MAAG,GAAXC,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CAAC,CAAC,gBAElDjB,OAAA;QAAAa,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACzB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CAhCQD,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAkCxB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}