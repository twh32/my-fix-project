{"ast":null,"code":"var _jsxFileName = \"/Users/admin/my_fix_project/frontend/src/components/ServerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ServerDashboard() {\n  _s();\n  const [logs, setLogs] = useState([]);\n\n  // For a prototype, we'll simulate log fetching with an API call.\n  // Ideally, your FIX server could expose a /logs endpoint.\n  const fetchLogs = async () => {\n    try {\n      // Replace this URL with your actual logs endpoint if available.\n      const response = await axios.get('http://localhost:5002/logs');\n      setLogs(response.data.logs);\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      // For now, we can simulate log data:\n      setLogs(prevLogs => [...prevLogs, `Log entry at ${new Date().toLocaleTimeString()}: No logs endpoint configured.`]);\n    }\n  };\n  useEffect(() => {\n    fetchLogs();\n    // Poll every 5 seconds for new logs.\n    const interval = setInterval(fetchLogs, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Server Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '1rem',\n        height: '300px',\n        overflowY: 'scroll'\n      },\n      children: logs.length > 0 ? logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 36\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No logs available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(ServerDashboard, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = ServerDashboard;\nexport default ServerDashboard;\nvar _c;\n$RefreshReg$(_c, \"ServerDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ServerDashboard","_s","logs","setLogs","fetchLogs","response","get","data","error","console","prevLogs","Date","toLocaleTimeString","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","border","padding","height","overflowY","length","map","log","index","_c","$RefreshReg$"],"sources":["/Users/admin/my_fix_project/frontend/src/components/ServerDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction ServerDashboard() {\n  const [logs, setLogs] = useState([]);\n\n  // For a prototype, we'll simulate log fetching with an API call.\n  // Ideally, your FIX server could expose a /logs endpoint.\n  const fetchLogs = async () => {\n    try {\n      // Replace this URL with your actual logs endpoint if available.\n      const response = await axios.get('http://localhost:5002/logs');\n      setLogs(response.data.logs);\n    } catch (error) {\n      console.error('Error fetching logs:', error);\n      // For now, we can simulate log data:\n      setLogs(prevLogs => [\n        ...prevLogs,\n        `Log entry at ${new Date().toLocaleTimeString()}: No logs endpoint configured.`\n      ]);\n    }\n  };\n\n  useEffect(() => {\n    fetchLogs();\n    // Poll every 5 seconds for new logs.\n    const interval = setInterval(fetchLogs, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <h2>Server Dashboard</h2>\n      <div style={{ border: '1px solid #ccc', padding: '1rem', height: '300px', overflowY: 'scroll' }}>\n        {logs.length > 0 ? (\n          logs.map((log, index) => <p key={index}>{log}</p>)\n        ) : (\n          <p>No logs available.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ServerDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA;EACA,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,4BAA4B,CAAC;MAC9DH,OAAO,CAACE,QAAQ,CAACE,IAAI,CAACL,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACAL,OAAO,CAACO,QAAQ,IAAI,CAClB,GAAGA,QAAQ,EACX,gBAAgB,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,gCAAgC,CAChF,CAAC;IACJ;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC;IACX;IACA,MAAMS,QAAQ,GAAGC,WAAW,CAACV,SAAS,EAAE,IAAI,CAAC;IAC7C,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEd,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBrB,OAAA;MAAKsB,KAAK,EAAE;QAAEC,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAT,QAAA,EAC7Fd,IAAI,CAACwB,MAAM,GAAG,CAAC,GACdxB,IAAI,CAACyB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAAK9B,OAAA;QAAAiB,QAAA,EAAgBY;MAAG,GAAXC,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CAAC,CAAC,gBAElDrB,OAAA;QAAAiB,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACzB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnB,EAAA,CAvCQD,eAAe;AAAA8B,EAAA,GAAf9B,eAAe;AAyCxB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}